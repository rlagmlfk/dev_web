내 안에 있는 메소드는 결정, 선택할 수 없어서 반드시 추상메소드로 만들어야 한다.
추상메소드는 반드시 세미콜론으로 끝난다.
추상클래스는 인터페이스와는 다르게 일반메소드를 가질 수 있다.
일반메소드 앞에는 abstact가 없다. 우중괄호 좌중괄호로 끝난다.
추상클래스 안에는 일반메소드와 추상메소드 모두를 선언, 구현, 설계할 수 있다.



자바 성적을 난수를 발생하여 5개 받은 후 
총점 평균 석차를 구하는 프로그램을 작성하시오

Random r = new Random();

int jumsu[] = new int[5]

r.nextlnt(101) -> 101을 주면 101은 포함X

총점 구하기

tot = tot + jumsu[i]

평균 구하기

double avg = 0.0

avg = tot / 5.0


추상메소드와 인터페이스는 프로그램(App) 설계를 위해 존재한다.
반드시 구현체 클래스가 필요하다.

상속이 재사용성을 위한 모범답안은 아니다. -> 결합도가 높고 의존적이다.

결합도를 낮추는 코드를 작성하려면 인터페이스 중심, 추상클래스 중심의 코딩을 전개해야 한다.
결합도가 낮으면 단위테스트나 통합테스트가 가능하다.

추상클래스 인스턴스변수 = new 구현체 클래스();
인터페이스 인스턴스 변수 = new 구현체 클래스();
-> 선언부와 생성부의 타입이 다르다.
    이렇게 인스턴스화가 가능하니까 다형성이 가능하다.
    구현체 클래스는 반드시 메소드오버라이딩이 필요하다.
    이러한 점 때문에 명세서라고도 한다.

동일한 메소드(fly())를 호출하는데 어떤 경우(MallardDuck)는 날고 있어요 가 출력되고 
어떤 경우(RubberDuck)는 날지 못합니다. 가 출력되는 것이 다형성

Duck myDuck = new MallardDuck();

Duck himDuck = new RubberDuck();

생성부의 이름으로 동일한 fly메소도의 기능 결정되는 것이다.

추상클래스보다 인터페이스가 더 추상적이다
둘 다 단독으로는 인스턴스화가 불가하다
추상클래스와 인터페이스를 인스턴스화할 때는 선언부와 생성부의 이름이 다를 수 있다.
인터페이스는 추상메소드만 가지며 생성자를 선언할 수 없다
추상클래스는 생성자를 가지며 일반메소드와 추상메소드 모두를 가진다

자동차 myCar = new 소나타();

ActionListener al = new JFrameTest();


2022-05-12 예외처리

5/3 = int/int = int = 1 소수점은?
오른쪽(실수형)에 있는 값을 왼쪽(정수)에 대입해주세요
int i = 3.5; 오른쪽에 있는 타입이 왼쪽보다 작아야 한다.
->강제형전환 int i = (int)3.5; // 단 소수점은 출력되지 않는다
컴파일 언어는 단순히 기계어로 바꿔주는 것 말고도 타입체크를 한다. - 신뢰도를 높인다

javascript - 컴파일 없다. 타입체크 없다. - typescript


1.11기준
e.toString; 예외이름 확인
e.getMessage()
try{
// 문제가 발생할 가능성이 있는 코드
int i = 5/x;
}catch(Exception e){
	e.getMessage(); // 예외처리 클래스명 출력
}

try...catch블록 안에 있는 코드가 문제 없다면 무시된다. 있으나 마나 하다.

a.methodA(new int[]{1,2,3}); 호출 
void mehtodA(int is[]){

}

int is[] = {1,2}

is.length = 2

print(is[2]) => ArrayIndexOutofBoundException

for(int i=0;i<2;i++) XXXX => for(int i=0;i<is.length;i++) 로 써야한다.

0부터 9사이의 숫자를 입력하세요
입력값이 유효하지 않으니까
|| 앞이 true이면 뒤의 조건을 따르지 않는다
왜냐하면 둘 중에 하나만 참이면 실행문이 실행된다.
두 번째 주건은 따질 필요 없다.
if(i<0||i>10) throw new Exception()


5월 13일(금) 네트워크 프로그래밍 수업

서버측 
1. 서버를 기동하기
ServerSocket sever = new ServerSocket(7000); // 7000번 대문이 열려있는 상태 -> 손님이 올때까지 기다림
이 클래스는 대문을 열어놓고 손님을 맞을 준비만 함
클라이언트측의 IP주소 수집, 대화를 지속하기 위한 로컬 포트번호 할당됨(클라이언트측)

Socket s = new Socket("서버의 아이피주소", 서버에서 열어놓은 포트번호);

실제로 클라이언트와 소통하는 일반 소켓이 필요
Socket client = server.accept(); // 클라이언트 소켓 정보를 받는다.

말하기 ObjectOutputStream oos = new ObjectOutputStream(client.getOutputStream());
듣기 ObjectInputStream ois = new ObjectInputStream(client.getIntputStream());

내가 보낸 메시지도 서버를 경유한 다음 출력한다.

스레드 - 경합이 벌어진다. 순서대로 처리해야 한다. 지속적으로 처리한다.

TalkServer.java

TalkThread.java

TalkClient.java

TalkClientThread.java

테스트 시나리오 작성해보기
서버가 먼저 기동되어야 한다. - ServerSocket(포트번호)생성하기

클라이언트가 접속을 시도한다. - new Socket(ip, port) 서버의 ip, 서버가 열어놓은 포트번호

서버는 accept()한다 - 서버에 접속한 소켓의 정보를 받는다.

이 소켓이 있어야 oos, ois 생성이 가능하다.
만일 소켓이 없으면 NullPointerException이다.

클라이언트측

UI측

5월 13일 숙제
구구단 중에서 시작단과 끝단을 입력받아서  출력하는 프로그램을 작성하시오.
이중 whiile문, 이중 for문
전역변수, 지역변수
선언부, 생성자, 사용자정의 메소드, 메인메소드는 클래스 하나 더 판다(simulation)



5월 16일(월)
API 활용능력
List라고 말하면 안되는 이유 - 인터페이스이기때문(추상메소드는 구현이 안되어있다.)
소유주(주소번지).size(); -> 여기서 소유주는 ArrayList

ActionListener event = new BaseBallGame();
-> 다형성
추상클래스
Duck myDuck = new MallardDuck();
myDuck = new WoodDuck();
myDuck = new RubberDuck();
myDuck.swimming()

인터페이스가 더 추상적
인터페이스는 일반메소드를 가질 수 없다.
추상클래스는 가능
추상메소드를 재정의해야한다. => 명세서 => 메소드 오버라이딩(구현은 다르지만 선언부는 일치해야함)
선언부와 생성부의 타입이 달라진다. => 다형성이 가능함
인터페이스는 생성자를 가질 수 없다.
유지보수에도 유리하다-> 코드를 적게 수정하고도 요구사항을 만족하는 프로그램 작성이 가능

List

Map

Set

Wrapper class: 원시형 타입은 변수와 타입을 가질 수 없기 때문에 생김

2022년 5월 16일 과제 입니다.

/*
-10에서 10사이의 정수 10개를 랜덤하게 채번하여  음수와 양수의 합계를 구하시오.
[요구사항 : 채번한 숫자는 1차 배열에 담아서 처리해 주세요]
출력)
배열 : 9 -2 -3 8 0 -3 -8 -6 -2 0
음수합 : -24
양수합 : 17
*/